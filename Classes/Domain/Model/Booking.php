<?php

namespace LeipzigUniversityLibrary\ubleipzigbooking\Domain\Model;

use \LeipzigUniversityLibrary\ubleipzigbooking\Library\AbstractEntity;

class Booking extends AbstractEntity {

	/**
	 * frontend user id
	 *
	 * @var integer
	 */
	protected $user;

	/**
	 *
	 * @var \LeipzigUniversityLibrary\ubleipzigbooking\Domain\Model\Room
	 */
	protected $room;

	/**
	 * @var string
	 */
	protected $memo;

	/**
	 * timestamp of the booking
	 *
	 * @var integer
	 */
	protected $timestamp;

	/**
	 * DateTime representation of timestamp
	 *
	 * @var \DateTimeImmutable
	 */
	private $dateTime;

	public function __construct($timestamp, $room, $comment = '') {
		if (!$GLOBALS['TSFE']->fe_user->user) throw new \Exception('no user found');
		$this->initializeObject();
		$this->setTimestamp($timestamp);
		$this->setRoom($room);
		$this->setComment($comment);
		$this->setUser($GLOBALS['TSFE']->fe_user->user['uid']);

		if ($room->getBookingStorage()) {
			$this->setPid($room->getBookingStorage());
		}
	}

	public function initializeObject() {
		$this->dateTime = new \DateTimeImmutable('now', new \DateTimeZone('Europe/Berlin'));

		parent::initializeObject(); // TODO: Change the autogenerated stub
	}

	public function setTimestamp($value) {
		$this->dateTime = $this->dateTime->setTimestamp($value);
		$this->timestamp = $value;
	}

	public function setComment($value) {
		$this->memo = $value;
	}

	public function getComment() {
		return $this->memo;
	}

	public function getDateTime() {
		return $this->dateTime->setTimestamp($this->timestamp);
	}

	public function getUser() {
		return $this->user;
	}
}